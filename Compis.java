/* Compis.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Compis.java */
import java.io.*;
import java.util.*;
import java.io.File;


public class Compis/*@bgen(jjtree)*/implements CompisTreeConstants, CompisConstants {/*@bgen(jjtree)*/
  protected JJTCompisState jjtree = new JJTCompisState();private PrintWriter outFile;
    public static int[] arr = new int[10];
    public static String[] arrFonts = new String[10];

    public static int contArr = 0;
    public static int contArrFonts = 0;
    public static boolean contElementos = false;

    public static boolean tagsIgualesLetras = false;
    public static boolean tagsIgualesAttr = false;

    public static boolean contFonts = false;

    public static String firstFont="Times New Roman";
    public static String secondFont="Times New Roman";

    public static int firstFontSize;
    public static int secondFontSize;


    public static int checarTagsConInts1;
    public static int checarTagsConInts2;
    public static int checarTagsConInts3;
    public static int checarTagsConInts4;




    public static void main(String[] args) throws IOException, ParseException
    {
        Compis parser;

        String filename = "";

        //Para imprimir en archivo externo
        String outFileName = "_OpenOffice.xml";
        PrintWriter outFile = new PrintWriter(outFileName);




        if(args.length == 0)
        {
            System.out.println ("Compis: Reading input ...");
            parser = new Compis(System.in);
        } else if(args.length == 1)
            {
                filename = args[0];
                System.out.println ("Compis: Reading the file " + filename + " ..." );

            try
            {
                parser = new Compis(new java.io.FileInputStream(filename));

                parser.outFile = outFile;
            }catch(java.io.FileNotFoundException e) {
                System.out.println ("Compis: The file " + filename + " was not found.");
                return;
            }

            } else {
                System.out.println ("Compis:  You must use one of the following:");
                System.out.println ("         java Compis < file");
                System.out.println ("Or");
                System.out.println ("         java Compis file");

                return ;
            }

        try {

            if(filename.contains(".")){
                filename = filename.substring(0, filename.lastIndexOf("."));
            }

            //Create header of output file
            String xmlVersion = "<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\u005cn";
            String appType = "<?mso-application progid='Word.Document'?>\u005cn";
            String header = "<w:wordDocument ";
            String schemaInfo = "xmlns:dt='uuid:C2F41010-65B3-11d1-A29F-00AA00C14882' ";
            String schemaInfo1 = "xmlns:v='urn:schemas-microsoft-com:vml' ";
            String schemaInfo2 ="xmlns:fo='urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0' ";
            String schemaInfo3 ="xmlns:w10='urn:schemas-microsoft-com:office:word' ";
            String schemaInfo4 ="xmlns:w='http://schemas.microsoft.com/office/word/2003/wordml' ";
            String schemaInfo5 ="xmlns:wx='http://schemas.microsoft.com/office/word/2003/auxHint' ";
            String schemaInfo6 ="xmlns:o='urn:schemas-microsoft-com:office:office' ";
            String schemaInfo7 ="xml:space='preserve' ";
            String schemaInfo8 ="w:embeddedObjPresent='no'>";


           outFile.println(xmlVersion + appType + header + schemaInfo + schemaInfo1 + schemaInfo2 + schemaInfo3 + schemaInfo4 + schemaInfo5 + schemaInfo6 + schemaInfo7 + schemaInfo8);

            SimpleNode root = parser.start();

            root.dump("");
            outFile.println("</w:wordDocument>");
            outFile.close();
            System.out.println ("Lexical and sintax analysis completed.");


            //Renombrar el archivo de salida
              File f = null;
              File f1 = null;
              boolean bool = false;

              try{
                 // create new File objects
                 f = new File("C:\u005c\u005cUsers\u005c\u005cMiguelAngel\u005c\u005cDesktop\u005c\u005cProyectoCompisConAST\u005c\u005c_OpenOffice.xml");
                 f1 = new File("C:\u005c\u005cUsers\u005c\u005cMiguelAngel\u005c\u005cDesktop\u005c\u005cProyectoCompisConAST\u005c\u005c"+filename+"_OpenOffice.xml");

                 // rename file
                 bool = f.renameTo(f1);

                 // print
                 System.out.print("File renamed? "+bool);

              }catch(Exception e){
                 // if any error occurs
                 e.printStackTrace();
              }

            //Fin de renombrar el archivo


        }
            catch(TokenMgrError e){
                outFile.close();
                System.out.println("Compis: There was an error with the token manager.");
                System.out.println(e.getMessage());

            }
            catch(ParseException e)
            {
                outFile.close();
                System.out.println("Errores del parser: ");
                System.out.println(e.getMessage());

            }
    }

    public static List<Token> tokenize(Compis parser)
    {
        List<Token> tokens = new ArrayList<Token>();

        Token token = parser.getNextToken();

        while (token.kind != CompisConstants.EOF)
        {
            tokens.add(token);
            token = parser.getNextToken();
        }

        return tokens;
    }

//Gramatica
  final public 
SimpleNode start() throws ParseException {/*@bgen(jjtree) START */
                            SimpleNode jjtn000 = new SimpleNode(JJTSTART);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      t1 = jj_consume_token(START_DOCUMENT);
System.out.println(t1.image);
        /*outFile.println("test of image: " + t1.image);*/

      documentStructure();
      t2 = jj_consume_token(END_DOCUMENT);
System.out.println(t2.image);
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void documentStructure() throws ParseException {/*@bgen(jjtree) DOC_STRUCT */
  SimpleNode jjtn000 = new SimpleNode(JJTDOC_STRUCT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      try {
        docProperties();
        docTitle();
        docBody();
        docConclusion();
      } catch (ParseException e) {
System.out.println("Errores del parser: ");
    System.out.println(e.getMessage());
    while(getToken(1).kind != OPEN_TAG && getToken(1).kind != EOF)
    {
        getNextToken();
    }
    if(getToken(1).kind != EOF)
    {
        getNextToken();
    }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void docProperties() throws ParseException {/*@bgen(jjtree) PROPERTIES */
                                  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTIES);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      t1 = jj_consume_token(START_DOCUMENT_PROPERTIES);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_TAG:{
        exprList();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        content();
      }
      t2 = jj_consume_token(END_DOCUMENT_PROPERTIES);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
firstFontSize=arr[0];
        secondFontSize=arr[1];
        //System.out.println("esta es la primer font: " + firstFontSize);
        //System.out.println("esta es la segunda font: " + secondFontSize);

        firstFont = arrFonts[0];
        if(firstFont == null)
        {
            firstFont ="'"+"Times New Roman"+"'";
        }

        secondFont = arrFonts[1];
        if(secondFont == null)
        {
            secondFont = "'"+"Times New Roman"+"'";
        }

         //Define defaultFonts
            String fontTagDeclaration = "\u005cn\u005cn<w:fonts>\u005cn";
            String font1 = "<w:font w:name='Times New Roman'><w:family w:val='Roman'/><w:pitch w:val='variable'/></w:font>\u005cn";
            String font2 = "<w:font w:name="+firstFont+"><w:family w:val='Swiss'/><w:pitch w:val='variable'/></w:font>\u005cn";
            String font3 = "<w:font w:name="+secondFont+"><w:family w:val='Swiss'/><w:pitch w:val='variable'/></w:font>\u005cn";
            String fontTagDeclarationEnd = "</w:fonts>\u005cn";


            //Define styles
            String stylesTagDeclaration = "\u005cn<w:styles>\u005cn\u005cn";

            String titleStyle1 = "\u005cn\u005cn<w:style w:styleId='Heading' w:type='paragraph'><w:basedOn w:val='Standard'/><w:name w:val='Heading'/><w:next w:val='Text_20_body'/><w:pPr><w:adjustRightInd w:val='off'/><w:spacing w:before='239.841' w:after='120.204'/><w:ind/><w:widowControl w:val='off'/><w:pBdr/><w:ind/></w:pPr><w:rPr><w:rFonts w:ascii="+firstFont+" w:h-ansi="+firstFont+" w:fareast='Microsoft YaHei' w:cs='Lucida Sans'/><w:sz w:val="+"'"+firstFontSize+"'"+"/></w:rPr></w:style>";
            String titleStyle2 = "\u005cn\u005cn<w:style w:styleId='Heading_20_1' w:type='paragraph'><w:basedOn w:val='Heading'/><w:name w:val='Heading_20_1'/><w:next w:val='Text_20_body'/><w:rPr><w:b/></w:rPr></w:style><w:style w:styleId='P3' w:type='paragraph'><w:basedOn w:val='Heading_20_1'/><w:name w:val='P3'/><w:hidden w:val='on'/><w:pPr><w:adjustRightInd w:val='off'/><w:jc w:val='center'/><w:spacing/><w:ind/><w:widowControl w:val='off'/><w:pBdr/><w:ind/></w:pPr></w:style>";
            String titleStyle3 = "\u005cn\u005cn<w:style w:styleId='P3' w:type='paragraph'><w:basedOn w:val='Heading_20_1'/><w:name w:val='P3'/><w:hidden w:val='on'/><w:pPr><w:adjustRightInd w:val='off'/><w:jc w:val='center'/><w:spacing/><w:ind/><w:widowControl w:val='off'/><w:pBdr/><w:ind/></w:pPr></w:style>";

            String bodyStyle1 ="\u005cn\u005cn<w:style w:styleId='Text_20_body' w:type='paragraph'><w:basedOn w:val='Standard'/><w:name w:val='Text_20_body'/><w:pPr><w:adjustRightInd w:val='off'/><w:jc w:val='justify'/><!--Alineacion default es left--><w:spacing w:before='0' w:after='120.204'/><w:ind/><w:widowControl w:val='off'/><w:pBdr/><w:ind/></w:pPr></w:style>";
            String bodyStyle2 = "\u005cn\u005cn<w:style w:styleId='P1' w:type='paragraph'><w:basedOn w:val='Text_20_body'/><w:name w:val='P1'/><w:hidden w:val='on'/><w:rPr><w:rFonts w:ascii="+secondFont+" w:h-ansi="+secondFont+"/><w:sz w:val="+"'"+secondFontSize+"'"+"/></w:rPr></w:style>";

            String conclusionStyle1 = "\u005cn\u005cn<w:style w:styleId='P2' w:type='paragraph'><w:basedOn w:val='Salutation'/><w:name w:val='P2'/><w:pPr><w:spacing w:before='500' w:after='120.204'/></w:pPr><w:hidden w:val='on'/><w:rPr><w:spacing w:before='300' w:after='120.204'/><w:rFonts w:ascii="+secondFont+" w:h-ansi="+secondFont+"/><w:sz w:val="+"'"+secondFontSize+"'"+"/></w:rPr></w:style>";

            String stylesTagDeclarationEnd = "\u005cn\u005cn</w:styles>\u005cn\u005cn";



            outFile.println(fontTagDeclaration + font1 + font2 + font3 + fontTagDeclarationEnd);
            outFile.println(stylesTagDeclaration + titleStyle1 + titleStyle2 + titleStyle3 + bodyStyle1 + bodyStyle2 + conclusionStyle1 + stylesTagDeclarationEnd);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void docTitle() throws ParseException {/*@bgen(jjtree) TITLE */
                         SimpleNode jjtn000 = new SimpleNode(JJTTITLE);
                         boolean jjtc000 = true;
                         jjtree.openNodeScope(jjtn000);Token t1;
    try {
outFile.println("\u005cn\u005ct<w:body>\u005cn\u005cn");
      jj_consume_token(START_TITLE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_TAG:{
        exprList();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
outFile.println("\u005cn\u005cn<w:p><w:pPr><w:pStyle w:val='P3'/></w:pPr><w:r><w:t>");
        content();
outFile.println("</w:t></w:r></w:p>");
      }
      jj_consume_token(END_TITLE);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void docBody() throws ParseException {/*@bgen(jjtree) BODY */
                       SimpleNode jjtn000 = new SimpleNode(JJTBODY);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(START_BODY);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_TAG:{
        exprList();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
outFile.println("\u005cn\u005cn<w:p><w:pPr><w:pStyle w:val='P1'/></w:pPr><w:r><w:t>");
        content();
outFile.println("</w:t></w:r></w:p>");
      }
      jj_consume_token(END_BODY);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void docConclusion() throws ParseException {/*@bgen(jjtree) CONCLUSION */
  SimpleNode jjtn000 = new SimpleNode(JJTCONCLUSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(START_CONCLUSION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OPEN_TAG:{
        exprList();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
outFile.println("\u005cn\u005cn<w:p><w:pPr><w:pStyle w:val='P2'/></w:pPr><w:r><w:t>");
        content();
outFile.println("</w:t></w:r></w:p>");
      }
      jj_consume_token(END_CONCLUSION);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
outFile.println("\u005ct</w:body>\u005cn");
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void exprList() throws ParseException {/*@bgen(jjtree) EXPR_LIST */
                             SimpleNode jjtn000 = new SimpleNode(JJTEXPR_LIST);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);Token t1, t2, t3, t4;
    try {
      label_1:
      while (true) {
        jj_consume_token(OPEN_TAG);
        t1 = jj_consume_token(LETTERS);
        jj_consume_token(ASSIGN_ATTRIBUTE);
        t2 = jj_consume_token(WORD);
        tagList();
outFile.println("\u005cn\u005cn<w:p><w:pPr><w:pStyle w:val='P1'/></w:pPr><w:r><w:t>");
        content();
outFile.println("</w:t></w:r></w:p>");
        jj_consume_token(OPEN_CLOSING_TAG);
        t3 = jj_consume_token(LETTERS);
        jj_consume_token(ASSIGN_ATTRIBUTE);
        t4 = jj_consume_token(WORD);
String temporal1 = t1.image.toString();
        String temporal2 = t2.image.toString();
        String temporal3 = t3.image.toString();
        String temporal4 = t4.image.toString();

        //System.out.println("Valor de la primer imagen: " + temporal1);
        //System.out.println("Valor de la segunda imagen: " + temporal2);
        //System.out.println("Valor de la tercer imagen: " + temporal3);
        //System.out.println("Valor de la cuarta imagen: " + temporal4);

        if(temporal1.equals(temporal3))
        {
            tagsIgualesLetras = true;
            //System.out.println("oli " + tagsIgualesLetras);
        }else
        {
            tagsIgualesLetras=false;
            System.out.println("La letra con que empiezan deben ser iguales, se encontro: "+temporal1+" y "+temporal3);
        }

        if(temporal2.equals(temporal4))
        {
            tagsIgualesAttr = true;
        }
        else
        {
            tagsIgualesAttr = false;
            System.out.println("El attributo con que empiezan deben ser iguales, se encontro: "+temporal2+" y "+temporal4);
        }


        if(tagsIgualesLetras==false || tagsIgualesAttr==false)
        {
            System.out.println("Las tags no coinciden, revisa el archivo");

            System.exit(0);
        }

        //checarTagsConInts1 = Integer.parseInt(temporal1);
        //checarTagsConInts2 = Integer.parseInt(temporal2);
        //checarTagsConInts3 = Integer.parseInt(temporal3);
        //checarTagsConInts4 = Integer.parseInt(temporal4);

        /*if(checarTagsConInts1==checarTagsConInts2)
        {
            tagsIguales = true;    
        }
        System.out.println("valor del booleano: " + tagsIguales);*/

        jj_consume_token(CLOSE_TAG_NORMAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case OPEN_TAG:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_1;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void tagList() throws ParseException {/*@bgen(jjtree) TAG_LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTTAG_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAL_TAG:
      case FONT_TAG:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FONT_TAG:{
          tag_string();
          break;
          }
        case VAL_TAG:{
          tag_int();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        tagList();
        break;
        }
      case CLOSE_TAG_NORMAL:{
        jj_consume_token(CLOSE_TAG_NORMAL);
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void tag_int() throws ParseException {/*@bgen(jjtree) TAG_INT */
                          SimpleNode jjtn000 = new SimpleNode(JJTTAG_INT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(VAL_TAG);
      jj_consume_token(EQUAL);
      t1 = jj_consume_token(DIGITS);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
String temp = t1.image;
        //System.out.println("Este es el temporal: "+temp);
        contElementos=true;

        while(contArr<2 && contElementos)
        {
            contElementos=false;
            arr[contArr] = Integer.parseInt(temp);
            //System.out.println("Este es el valor de arr en la posicion: "+contArr+" y el valor es: "+arr[contArr]);
            contArr++;
        }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  final public void tag_string() throws ParseException {/*@bgen(jjtree) TAG_STRING */
                                SimpleNode jjtn000 = new SimpleNode(JJTTAG_STRING);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);Token t1;
    try {
      jj_consume_token(FONT_TAG);
      jj_consume_token(EQUAL);
      t1 = jj_consume_token(STRING);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
String tempFont = t1.image;
        //System.out.println("Este es el temporal: "+tempFont);
        contFonts=true;

        while(contArrFonts<2 && contFonts)
        {
            contFonts=false;
            arrFonts[contArrFonts] = tempFont;
            //System.out.println("Este es el valor de arrFonts en la posicion: "+contArrFonts+" y el valor es: "+arrFonts[contArrFonts]);
            contArrFonts++;
        }
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void content() throws ParseException {/*@bgen(jjtree) CONTENT */
                          SimpleNode jjtn000 = new SimpleNode(JJTCONTENT);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);Token t1; String test;
    try {
      if (jj_2_1(2)) {
        finalContent();
      } else {
jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;

      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void finalContent() throws ParseException {/*@bgen(jjtree) FINALCONTENT */
                                    SimpleNode jjtn000 = new SimpleNode(JJTFINALCONTENT);
                                    boolean jjtc000 = true;
                                    jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WORD:{
        label_2:
        while (true) {
          t1 = jj_consume_token(WORD);
outFile.println(t1.image);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case WORD:{
            ;
            break;
            }
          default:
            jj_la1[7] = jj_gen;
            break label_2;
          }
        }
        break;
        }
      case LETTERS:{
        t2 = jj_consume_token(LETTERS);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
outFile.println(t2.image);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3R_6()
 {
    if (jj_scan_token(WORD)) return true;
    return false;
  }

  private boolean jj_3R_4()
 {
    Token xsp;
    if (jj_3R_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_3()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_3()) return true;
    return false;
  }

  private boolean jj_3R_5()
 {
    if (jj_scan_token(LETTERS)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CompisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x480000,0x480000,0x10000000,0x10800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x1,0x1,0x1,0x1,0x0,0x4,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compis(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compis(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compis(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compis(CompisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
